<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:my="*"
			   height = "140" width="100%"
			   minWidth="300" minHeight="100" 
			   initialize="application_initialize(event)" 
			   backgroundColor="#293134"
			   resize="application1_resizeHandler(event)">

	<fx:Script>
		<![CDATA[
			import org.osmf.events.TimeEvent;
			use namespace mx_internal;
			
			import flash.system.*;
			
			import mx.controls.*;
			import mx.core.mx_internal;
			import mx.events.*;
			import mx.managers.*;

			
			private var core:LocachaCore;
			
			private var camera:Camera = null;
			private var localDisplay:UserDisplay;
			private var startVideoButton:Button;
			
			private var userCams:Object = new Object();
			private var lastHeight:Number;
			
			
			protected function application_initialize(event:FlexEvent):void
			{
				core = new LocachaCore(this);
				
				core.connect();
				
				showStartVideoButton();
				
				if (ExternalInterface.available)
				{
					ExternalInterface.addCallback("turnOn", turnOn); 
					ExternalInterface.addCallback("turnOff", turnOff); 
					ExternalInterface.addCallback("selectUser", selectUser); 
				} 
				
				this.raiseSizeUpdate();
			}
			
			public function user_update(user:LocachaUser):void
			{
				// if user has a display box, update the stream
				if(userCams[user.userID] && !user.videoStream)
				{
					mainLayout.removeElement(userCams[user.userID]);
					
					delete userCams[user.userID];	
					
					raiseSizeUpdate();
				}
				// no video box
				else if(!userCams[user.userID] && user.videoStream)
				{
					// good handle add
					var display:UserDisplay = new UserDisplay();
					display.setUser(this, user);
					
					mainLayout.addElement(display);
					
					var video:Video = new Video();
					video.width = 160;
					video.height = 120;
					video.attachNetStream(user.videoStream);
					display.video.addChild(video);

					userCams[user.userID] = display;
					
					raiseSizeUpdate();
				}
			}
			
			protected function application1_resizeHandler(event:ResizeEvent):void
			{
				raiseSizeUpdate();
			}
			
			public function raiseSizeUpdate():void
			{
				var rightHeight:Number = 3;
				
				if(mainLayout && mainLayout.visible)
				{
					rightHeight += (mainLayout.layout as FlowLayout).internalHeight;
					if(rightHeight < 140)
						rightHeight = 140;
				}

				if(rightHeight != lastHeight)
				{
					lastHeight = rightHeight;
					trace("firing " + lastHeight.toString());
					ExternalInterface.call("flash_sizeUpdate", rightHeight);
				}	
			}
			
			protected function turnOn():void
			{
				core.connect();
				mainLayout.visible = true;
				raiseSizeUpdate();
			}
			
			protected function turnOff():void
			{
				stopLocalVideo();
				core.dispose();
				mainLayout.visible = false;
				raiseSizeUpdate();
			}

			private function showStartVideoButton():void
			{
				startVideoButton = new Button();
				startVideoButton.label="start my video";
				startVideoButton.labelPlacement = "center";
				startVideoButton.width = 160;
				startVideoButton.height = 120;
				startVideoButton.addEventListener(MouseEvent.CLICK, startVideoButton_click);
				
				mainLayout.addElementAt(startVideoButton, 0);
			}
			
			protected function stopLocalVideo():void
			{
				if(!localDisplay)
					return;
				
				camera = null;
				localDisplay.video.attachCamera(null);
				
				mainLayout.removeElement(localDisplay);
				mainLayout.addElementAt(startVideoButton, 0);
				
				core.updateVideo(null);
			
				delete userCams[core.localUserID];
			}
			
			protected function startVideoButton_click(event:Event):void
			{
				camera = Camera.getCamera();
				
				if(camera)
				{
					camera.setMode(160, 120, 15);
					
					localDisplay = new UserDisplay();
					localDisplay.setUser(this, core.localUser);
					mainLayout.removeElement(startVideoButton);
					mainLayout.addElementAt(localDisplay, 0);

					localDisplay.video.attachCamera(camera);
					
					userCams[core.localUserID] = localDisplay;
				}
				else
					Alert.show("no camera found :(");
				
				core.updateVideo(camera);
			}

			protected function mainLayout_clickHandler(event:MouseEvent):void
			{
				selectUser("");
			}
			
			public function selectUser(userID:String):void
			{
				for each(var user:UserDisplay in userCams)
					user.highlight(userID);		
					
				if (ExternalInterface.available)
					ExternalInterface.call("flash_selectedUser", userID);		
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:Group id="mainLayout" width="100%" height="100%" contentBackgroundAlpha="0" click="mainLayout_clickHandler(event)">
		<s:layout>
			<my:FlowLayout/>
		</s:layout>
		<mx:Button width="160" height="120" label="hello" />
		<mx:Button width="160" height="120" label="start" />
		<mx:Button width="160" height="120" label="test" />
	</s:Group>

</s:Application>
