<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:my="*"
			   height = "140" width="100%"
			   minWidth="300" minHeight="100" 
			   backgroundColor="#293134"
			   resize="application1_resizeHandler(event)" 
			   applicationComplete="app_complete(event)" >

	<fx:Script>
		<![CDATA[
			import org.osmf.events.TimeEvent;
			use namespace mx_internal;
			
			import flash.system.*;
			
			import mx.controls.*;
			import mx.core.mx_internal;
			import mx.events.*;
			import mx.managers.*;

			
			public var core:LocachaCore;
			
			public var camera:Camera;
			public var mic:Microphone;
			
			public var localDisplay:UserDisplay;

			public var userCams:Object = new Object();
			public var lastHeight:Number;
			
			public var sampleTimer:Timer;
			public var lastSample:Number;
			public var sendSamples:Array = new Array();
			
			
			protected function app_complete(event:FlexEvent):void
			{
				Security.allowDomain("*")
					
				core = new LocachaCore(this);
				
				core.connect();

				if (ExternalInterface.available)
				{
					ExternalInterface.addCallback("turnOn", turnOn); 
					ExternalInterface.addCallback("turnOff", turnOff); 
					ExternalInterface.addCallback("selectUser", selectUser); 
				} 

				sampleTimer = new Timer(200);
				sampleTimer.addEventListener(TimerEvent.TIMER, timer_audioSample);
				
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, app_uncaughtError);

			}
			
			private function app_uncaughtError(e:UncaughtErrorEvent):void
			{
				// Do something with your error.
				if (e.error is Error)
				{
					var error:Error = e.error as Error;
					LocaDebug.log("Uncaught error: " + error.name + " - " + error.message + " - " + error.getStackTrace());
				}
				else
				{
					var errorEvent:ErrorEvent = e.error as ErrorEvent;
					LocaDebug.log("Uncaught error event: " + errorEvent.errorID + " - " + errorEvent.text);
				}
			}
			
			public function user_update(user:LocachaUser):void
			{
				// if user has a display box, update the stream
				if(userCams[user.userID] && !user.videoStream)
				{
					mainLayout.removeElement(userCams[user.userID]);
					
					delete userCams[user.userID];	
					
					raiseSizeUpdate();
				}
				// no video box
				else if(!userCams[user.userID] && user.videoStream)
				{
					// good handle add
					var display:UserDisplay = new UserDisplay();
					display.setUser(this, user);
					
					mainLayout.addElement(display);
					
					var video:Video = new Video();
					video.width = 160;
					video.height = 120;
					video.attachNetStream(user.videoStream);
					display.video.addChild(video);

					userCams[user.userID] = display;
					
					raiseSizeUpdate();
				}
			}
			
			protected function application1_resizeHandler(event:ResizeEvent):void
			{
				raiseSizeUpdate();
			}
			
			public function raiseSizeUpdate():void
			{
				var rightHeight:Number = 0;
				
				if(mainLayout && mainLayout.visible)
					rightHeight = (mainLayout.layout as FlowLayout).internalHeight;
				
				if(rightHeight < 140)
					rightHeight = 140;

				if(rightHeight != lastHeight)
				{
					lastHeight = rightHeight;
					ExternalInterface.call("site.flash_sizeUpdate", rightHeight);
				}	
			}
			
			protected function turnOn():void
			{
				core.connect();
				mainLayout.visible = true;
				raiseSizeUpdate();
			}
			
			protected function turnOff():void
			{
				stopLocalVideo();
				core.dispose();
				mainLayout.visible = false;
				raiseSizeUpdate();
			}
			
			public function stopLocalVideo():void
			{
				if(!localDisplay)
					return;
				
				camera = null;
				localDisplay.video.attachCamera(null);
				
				if(mic)
					mic.addEventListener(SampleDataEvent.SAMPLE_DATA, mic_SampleData);

				sampleTimer.stop();
				
				mainLayout.removeElement(localDisplay);
				localDisplay = null;
				
				startVideoButton.visible = true;
				startVideoButton.includeInLayout = true;
				
				core.updateLocalVideo(null, null);
			
				delete userCams[core.localUserID];
			}
			
			protected function startVideoButton_click(event:Event):void
			{
				try
				{
					camera = Camera.getCamera();
					
					if(camera)
					{
						mic = Microphone.getMicrophone();
						if(mic)
							mic.addEventListener(SampleDataEvent.SAMPLE_DATA, mic_SampleData);

						camera.setMode(160, 120, 5);
						mic.codec = SoundCodec.SPEEX;

						localDisplay = new UserDisplay();
						localDisplay.setUser(this, core.localUser);
						
						startVideoButton.visible = false;
						startVideoButton.includeInLayout = false;
						mainLayout.addElementAt(localDisplay, 0);
	
						localDisplay.video.attachCamera(camera);
	
						userCams[core.localUserID] = localDisplay;
						
						sampleTimer.start(); // run because we use it for ping as well
					}
					else
						Alert.show("no camera found :(");
					
					core.updateLocalVideo(camera, mic);
				}
				catch(err:Error)
				{
					LocaDebug.logError("startVideoButton_click", err);
				}
			}

			protected function mainLayout_clickHandler(event:MouseEvent):void
			{
				selectUser("");
			}
			
			public function selectUser(userID:String):void
			{
				for each(var user:UserDisplay in userCams)
					user.highlight(userID);		
					
				if (ExternalInterface.available)
					ExternalInterface.call("site.flash_selectedUser", userID);		
			}
			
			private function mic_SampleData(event:SampleDataEvent):void
			{
				if(!localDisplay)
					return;
				
				// when the user pulls the slider up and down, they'll see their max volume be at the slider max
				
				var relativeVolume:Number = mic.activityLevel * mic.gain / 100;
				
				localDisplay.updateVolume(relativeVolume);
				
				lastSample = mic.activityLevel;
			}

			// basically there's no way for the receiver to query the audio volume coming in, so we have to send 
			// the levels manually. it doesnt have to match up perfectly or be on time, just something so the remote
			// user knows someone is talking on the other end
			// ** this function also used as ping so sends a bunch of 0s if mic not on
			private function timer_audioSample(event:TimerEvent) : void
			{
				try
				{
					sendSamples.push(lastSample);
					
					if(sendSamples.length == 10)
					{
						if(core.videoStream && core.localConnectState == ConnectState.CONNECTED)
							core.videoStream.send("audioSamples", sendSamples);
					
						sendSamples.length = 0;
					}	
				}
				catch(err:Error)
				{
					LocaDebug.logError("timer_audioSample", err);
				}
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:Group id="mainLayout" width="100%" height="100%" contentBackgroundAlpha="0" click="mainLayout_clickHandler(event)">
		<s:layout>
			<my:FlowLayout/>
		</s:layout>
		<mx:Button id="startVideoButton" labelPlacement="bottom" label="start my cam" icon="@Embed(source='assets/camera.png')" overIcon="@Embed(source='assets/camera_over.png')"  width="160" height="120" click="startVideoButton_click(event)"  />
		
		<!--<mx:Button width="160" height="120" label="hello" />
		<mx:Button width="160" height="120" label="start" />
		<mx:Button width="160" height="120" label="test" />-->
	</s:Group>

</s:Application>
